services:
  # Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring

  # Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=${GRAFANA_ALLOW_SIGN_UP:-false}
      - GF_USERS_DISABLE_GRAVATAR=${GRAFANA_DISABLE_GRAVATAR:-false}
      - GF_SERVER_ROOT_URL=${DOMAIN:+https://${DOMAIN}/grafana/}
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    networks:
      - monitoring

  # System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - ./node_exporter_textfiles:/textfiles:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.textfile.directory=/textfiles'
    networks:
      - monitoring

  # ZFS Metrics Collector
  zfs-collector:
    image: ubuntu:22.04
    container_name: zfs-collector
    restart: unless-stopped
    network_mode: host
    privileged: true
    volumes:
      - ./zfs-exporter.sh:/zfs-exporter.sh:ro
      - ./node_exporter_textfiles:/textfiles
    command: >
      sh -c "
        apt-get update &&
        apt-get install -y zfsutils-linux &&
        while true; do
          /zfs-exporter.sh
          sleep 30
        done
      "

  # Process Exporter for detailed process monitoring
  process-exporter:
    image: ncabatoff/process-exporter:latest
    container_name: process-exporter
    restart: unless-stopped
    ports:
      - "${PROCESS_EXPORTER_PORT:-9256}:9256"
    volumes:
      - /proc:/host/proc:ro
      - ./process-exporter.yml:/config/process-exporter.yml
    command:
      - '--procfs=/host/proc'
      - '--config.path=/config/process-exporter.yml'
      - '--web.listen-address=0.0.0.0:9256'
    networks:
      - monitoring

  # Docker Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "${CADVISOR_PORT:-8081}:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - monitoring

  # ZFS Metrics - Using textfile collector instead of separate exporter
  # zfs-exporter:
  #   image: matusnovak/prometheus-zfs:latest
  #   container_name: zfs-exporter
  #   restart: unless-stopped
  #   ports:
  #     - "9134:9134"
  #   volumes:
  #     - /proc:/host/proc:ro
  #   privileged: true
  #   networks:
  #     - monitoring

  # Uptime Monitoring
  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    restart: unless-stopped
    ports:
      - "${UPTIME_KUMA_PORT:-3001}:3001"
    volumes:
      - uptime_data:/app/data
    networks:
      - monitoring

  # Docker Management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    ports:
      - "${PORTAINER_PORT:-9443}:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - monitoring

volumes:
  prometheus_data:
  grafana_data:
  uptime_data:
  portainer_data:

networks:
  monitoring:
    driver: bridge
    name: ${DOCKER_NETWORK_NAME:-monitoring}
